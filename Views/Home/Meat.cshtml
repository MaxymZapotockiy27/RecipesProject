@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model List<Recipesbook.Models.Meat>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #fdf7e3;
        }

        .category-card {
            height: 140px;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            border-radius: 10px;
            background-color: #ffe5d9;
            margin-bottom: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }

            .category-card:hover {
                transform: scale(1.05); 
                box-shadow: 4px 4px 15px rgba(0, 0, 0, 0.2);
            }

            .category-card:active {
                transform: scale(0.95); 
                box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
            }

        .category-text {
            font-size: 20px;
            font-weight: bold;
            padding-left: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #6d6875;
        }

        .category-img {
            height: 120px;
            width: 120px;
            border-radius: 10px;
            object-fit: cover;
            border: 2px solid #f4a261;
        }

        .btn-primary {
            background-color: #ffb4a2;
            border: none;
        }

            .btn-primary:hover {
                background-color: #e5989b;
            }

        input.form-control {
            border: 2px solid #ffb4a2;
        }

        .show {
            display: flex;
        }

        .hide {
            display: none;
        }

        #searchInput:focus {
            border-color: #ffb4a2 !important;
            box-shadow: 0 0 5px #ffb4a2 !important;
            outline: none !important; 
        }
    </style>
</head>
<body>
    <div class="container mt-3">
        <div class="mb-3 d-flex">
            <input type="text" id="searchInput" class="form-control me-2" placeholder="Search...">
         </div>

        @foreach (var fruit in Model)
        {
            <div class="category-card show" onclick="addToSessionStorage('@fruit.Name')" data-name="@fruit.Name.ToLower()">
                <div class="category-text">
                    @fruit.Name
                </div>
                <img src="@fruit.ImageUrl" alt="@fruit.Name" class="category-img" loading="lazy">
            </div>
        }
        <div id="ingredients-show" style="display: none;">
            <h4>Ingredients</h4>
            <ul id="ingredients-list"></ul>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        const categoryCards = document.querySelectorAll('.category-card');

        // Add event listener for search input
        searchInput.addEventListener('input', filterCards);
        searchButton.addEventListener('click', filterCards);

        function filterCards() {
            const searchValue = searchInput.value.toLowerCase();

            // If search field is empty, show all cards
            if (searchValue === '') {
                categoryCards.forEach(card => {
                    card.classList.remove('hide');
                    card.classList.add('show');
                });
                return;
            }

            // If search field has content, check first 3 letters
            categoryCards.forEach(card => {
                const fruitName = card.getAttribute('data-name');

                // If search is less than 3 characters, match with what we have so far
                const compareLength = Math.min(searchValue.length, 3);

                if (fruitName.substring(0, compareLength) === searchValue.substring(0, compareLength)) {
                    card.classList.remove('hide');
                    card.classList.add('show');
                } else {
                    card.classList.remove('show');
                    card.classList.add('hide');
                }
            });
        }
        const ingredientsShowDiv = document.getElementById('ingredients-show');
        const allIngredientsDiv = document.getElementById('all-ingredients');
        const ingredientsContentDiv = document.getElementById('ingredients-content');
        const showAllBtn = document.querySelector('.show-all-btn');
        const deleteAllBtn = document.querySelector('.delete-all-btn');
        function addToSessionStorage(ingredientName) {
            // Retrieve existing ingredients from sessionStorage
            let ingredients = sessionStorage.getItem('ingredients');
            if (!ingredients) {
                ingredients = [];
            } else {
                ingredients = JSON.parse(ingredients);
            }

            ingredients.push(ingredientName);

            sessionStorage.setItem('ingredients', JSON.stringify(ingredients));

            displayIngredients();
            updateIngredientsList();

        }
        function updateIngredientsList() {
            let savedIngredients = sessionStorage.getItem('ingredients');

            if (savedIngredients) {
                savedIngredients = JSON.parse(savedIngredients);

                if (savedIngredients.length > 0) {
                    let ingredientsHTML = '<ul>';
                    savedIngredients.forEach((ingredient, index) => {
                        ingredientsHTML += `
                                                        <li>
                                                            ${ingredient}
                                                            <button class="delete-item-btn" data-index="${index}">×</button>
                                                        </li>`;
                    });
                    ingredientsHTML += '</ul>';
                    ingredientsContentDiv.innerHTML = ingredientsHTML;

                    document.querySelectorAll('.delete-item-btn').forEach(button => {
                        button.addEventListener('click', function () {
                            const index = parseInt(this.getAttribute('data-index'));
                            removeIngredient(index);
                        });
                    });
                } else {
                    ingredientsContentDiv.innerHTML = '<p class="empty-list-message">The list is empty</p>';
                }
            } else {
                ingredientsContentDiv.innerHTML = '<p class="empty-list-message">The list is empty</p>';
            }
        }
        function displayIngredients() {
            let savedIngredients = sessionStorage.getItem('ingredients');
            if (savedIngredients) {
                savedIngredients = JSON.parse(savedIngredients);

                document.getElementById('ingredients-show').style.display = 'flex';

                const ingredientListElement = document.getElementById('ingredients-list');
                ingredientListElement.innerHTML = '';
                savedIngredients.forEach(ingredient => {
                    const li = document.createElement('li');
                    li.textContent = ingredient;
                    ingredientListElement.appendChild(li);
                });

                console.log(`Count of ingredients: ${savedIngredients.length}`);
            } else {
                console.log('Zero ingredients');
                document.getElementById('ingredients-show').style.display = 'none';
            }
        }

        
        window.onload = displayIngredients;
        function removeIngredient(index) {
            let savedIngredients = JSON.parse(sessionStorage.getItem('ingredients'));
            savedIngredients.splice(index, 1);

            if (savedIngredients.length > 0) {
                sessionStorage.setItem('ingredients', JSON.stringify(savedIngredients));
            } else {
                sessionStorage.removeItem('ingredients');
                ingredientsShowDiv.style.display = 'none';
            }

            updateIngredientsList();
        }
        function deleteButtonClickHandler() {
            const index = parseInt(this.getAttribute('data-index'));
            removeIngredient(index);
        }
    </script>
</body>
</html>
